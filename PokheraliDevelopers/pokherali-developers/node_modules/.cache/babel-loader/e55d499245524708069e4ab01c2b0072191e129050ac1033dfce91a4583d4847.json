{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Desktop\\\\Test\\\\PokheraliDevelopers\\\\pokherali-developers\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is logged in when the component mounts\n  useEffect(() => {\n    // Check if user data exists in localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n        setIsAuthenticated(true);\n      } catch (err) {\n        console.error('Error parsing stored user data:', err);\n        localStorage.removeItem('user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('https://localhost:7126/api/Auth/login', {\n        email,\n        password\n      });\n\n      // If login is successful, store user data in localStorage\n      if (response.data && response.data.email) {\n        // Store the user object returned from the server\n        const userData = {\n          id: response.data.id || response.data.userId,\n          email: response.data.email,\n          firstName: response.data.firstName,\n          lastName: response.data.lastName,\n          address: response.data.address,\n          city: response.data.city,\n          state: response.data.state,\n          zipCode: response.data.zipCode,\n          roles: response.data.roles || []\n        };\n\n        // Save to state and localStorage\n        setUser(userData);\n        setIsAuthenticated(true);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return true;\n      } else {\n        throw new Error('Invalid response from server');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Login error:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to login. Please check your credentials.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    // Clear user data from localStorage\n    localStorage.removeItem('user');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const register = async registerData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      await axios.post('https://localhost:7126/api/Auth/register', registerData);\n      return true;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('Registration error:', err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to register. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await axios.put('https://localhost:7126/api/Account/profile', profileData);\n      if (response.data) {\n        // Update the stored user data\n        const updatedUser = {\n          ...user,\n          ...response.data\n        };\n        setUser(updatedUser);\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        return true;\n      }\n      return false;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      console.error('Profile update error:', err);\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Failed to update profile. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      login,\n      logout,\n      register,\n      updateProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"FjMZAxZvphMxP/TGOt3ewSdLoU4=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","storedUser","localStorage","getItem","parsedUser","JSON","parse","err","console","removeItem","login","email","password","response","post","data","userData","id","userId","firstName","lastName","address","city","state","zipCode","roles","setItem","stringify","Error","_err$response","_err$response$data","message","logout","register","registerData","_err$response2","_err$response2$data","updateProfile","profileData","put","updatedUser","_err$response3","_err$response3$data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Desktop/Test/PokheraliDevelopers/pokherali-developers/src/contexts/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user is logged in when the component mounts\r\n  useEffect(() => {\r\n    // Check if user data exists in localStorage\r\n    const storedUser = localStorage.getItem('user');\r\n    \r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setUser(parsedUser);\r\n        setIsAuthenticated(true);\r\n      } catch (err) {\r\n        console.error('Error parsing stored user data:', err);\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    \r\n    setIsLoading(false);\r\n  }, []);\r\n  \r\n  const login = async (email, password) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post('https://localhost:7126/api/Auth/login', { email, password });\r\n      \r\n      // If login is successful, store user data in localStorage\r\n      if (response.data && response.data.email) {\r\n        // Store the user object returned from the server\r\n        const userData = {\r\n          id: response.data.id || response.data.userId,\r\n          email: response.data.email,\r\n          firstName: response.data.firstName,\r\n          lastName: response.data.lastName,\r\n          address: response.data.address,\r\n          city: response.data.city,\r\n          state: response.data.state,\r\n          zipCode: response.data.zipCode,\r\n          roles: response.data.roles || []\r\n        };\r\n        \r\n        // Save to state and localStorage\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        \r\n        return true;\r\n      } else {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      setError(err.response?.data?.message || 'Failed to login. Please check your credentials.');\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  const logout = () => {\r\n    // Clear user data from localStorage\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n  \r\n  const register = async (registerData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      await axios.post('https://localhost:7126/api/Auth/register', registerData);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Registration error:', err);\r\n      setError(err.response?.data?.message || 'Failed to register. Please try again.');\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Update user profile\r\n  const updateProfile = async (profileData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.put('https://localhost:7126/api/Account/profile', profileData);\r\n      \r\n      if (response.data) {\r\n        // Update the stored user data\r\n        const updatedUser = { ...user, ...response.data };\r\n        setUser(updatedUser);\r\n        localStorage.setItem('user', JSON.stringify(updatedUser));\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } catch (err) {\r\n      console.error('Profile update error:', err);\r\n      setError(err.response?.data?.message || 'Failed to update profile. Please try again.');\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <UserContext.Provider \r\n      value={{ \r\n        user, \r\n        isAuthenticated, \r\n        isLoading, \r\n        error, \r\n        login, \r\n        logout, \r\n        register,\r\n        updateProfile\r\n      }}\r\n    >\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}