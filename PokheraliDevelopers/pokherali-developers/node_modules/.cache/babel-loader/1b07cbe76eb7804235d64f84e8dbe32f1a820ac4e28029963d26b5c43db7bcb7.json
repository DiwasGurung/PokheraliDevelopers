{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Desktop\\\\Test\\\\PokheraliDevelopers\\\\pokherali-developers\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\n\n// Provide context to children\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchCartItems = async () => {\n    setIsLoading(true);\n    try {\n      const storedUser = localStorage.getItem('user');\n      if (!storedUser) {\n        setCartItems([]);\n        setIsLoading(false);\n        return;\n      }\n\n      // Call the correct endpoint as defined in your CartController\n      const response = await axios.get('https://localhost:7126/api/Cart');\n      setCartItems(response.data.items || []);\n      setIsLoading(false);\n    } catch (err) {\n      setError(err.message || 'Error fetching cart items');\n      setIsLoading(false);\n    }\n  };\n  const addToCart = async ({\n    bookId,\n    quantity\n  }) => {\n    try {\n      const storedUser = localStorage.getItem('user');\n      if (!storedUser) {\n        throw new Error('User is not logged in');\n      }\n      const data = {\n        bookId: bookId,\n        quantity: quantity\n      };\n      const response = await axios.post('https://localhost:7126/api/Cart/add', data);\n\n      // Update local cart state\n      fetchCartItems();\n      return response.data;\n    } catch (err) {\n      setError(err.message || 'Error adding item to cart');\n      throw err;\n    }\n  };\n\n  // Update cart item quantity\n  const updateCartItemQuantity = async (cartItemId, quantity) => {\n    try {\n      const storedUser = localStorage.getItem('user');\n      if (!storedUser) {\n        throw new Error('User is not logged in');\n      }\n\n      // Handle removing item if quantity is 0 or less\n      if (quantity <= 0) {\n        return removeItem(cartItemId);\n      }\n\n      // Use the update endpoint from your controller\n      await axios.put('https://localhost:7126/api/Cart/update', {\n        cartItemId: cartItemId,\n        quantity: quantity\n      });\n\n      // Refresh cart after successful update\n      fetchCartItems();\n    } catch (err) {\n      setError(err.message || 'Error updating item quantity');\n      throw err;\n    }\n  };\n  const removeItem = async cartItemId => {\n    try {\n      const storedUser = localStorage.getItem('user');\n      if (!storedUser) {\n        throw new Error('User is not logged in');\n      }\n\n      // Per your API, the endpoint should be api/Cart/{cartItemId}\n      await axios.delete(`https://localhost:7126/api/Cart/${cartItemId}`);\n\n      // Refresh cart after successful removal\n      fetchCartItems();\n    } catch (err) {\n      setError(err.message || 'Error removing item from cart');\n    }\n  };\n  // Update your CartContext.js file with the following clearCart function\n\n  const clearCart = async () => {\n    try {\n      const storedUser = localStorage.getItem('user');\n      if (!storedUser) {\n        throw new Error('User is not logged in');\n      }\n\n      // Call the clear cart endpoint\n      await axios.delete('https://localhost:7126/api/Cart/clear', {\n        withCredentials: true\n      });\n\n      // Update local state\n      setCartItems([]);\n    } catch (err) {\n      setError(err.message || 'Error clearing cart');\n      throw err;\n    }\n  };\n  useEffect(() => {\n    fetchCartItems();\n  }, []);\n\n  // Then make sure to include clearCart in your context value\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      isLoading,\n      error,\n      addToCart,\n      removeItem,\n      updateCartItemQuantity,\n      clearCart // Add this\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 3\n  }, this);\n};\n// Custom hook to use Cart Context\n_s(CartProvider, \"IdlZJRAG+08Nk9hWXVgV1OzzOk8=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","isLoading","setIsLoading","error","setError","fetchCartItems","storedUser","localStorage","getItem","response","get","data","items","err","message","addToCart","bookId","quantity","Error","post","updateCartItemQuantity","cartItemId","removeItem","put","delete","clearCart","withCredentials","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Desktop/Test/PokheraliDevelopers/pokherali-developers/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Create Context\r\nexport const CartContext = createContext();\r\n\r\n// Provide context to children\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchCartItems = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const storedUser = localStorage.getItem('user');\r\n      if (!storedUser) {\r\n        setCartItems([]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n  \r\n      // Call the correct endpoint as defined in your CartController\r\n      const response = await axios.get('https://localhost:7126/api/Cart');\r\n      \r\n      setCartItems(response.data.items || []);\r\n      setIsLoading(false);\r\n    } catch (err) {\r\n      setError(err.message || 'Error fetching cart items');\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const addToCart = async ({bookId, quantity}) => {\r\n    try {\r\n      const storedUser = localStorage.getItem('user');\r\n      if (!storedUser) {\r\n        throw new Error('User is not logged in');\r\n      }\r\n      \r\n      const data = {\r\n        bookId: bookId,\r\n        quantity: quantity,\r\n      };\r\n      \r\n      const response = await axios.post(\r\n        'https://localhost:7126/api/Cart/add',\r\n        data\r\n  \r\n      );\r\n      \r\n      // Update local cart state\r\n      fetchCartItems();\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.message || 'Error adding item to cart');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Update cart item quantity\r\n  const updateCartItemQuantity = async (cartItemId, quantity) => {\r\n    try {\r\n      const storedUser = localStorage.getItem('user');\r\n      if (!storedUser) {\r\n        throw new Error('User is not logged in');\r\n      }\r\n\r\n      // Handle removing item if quantity is 0 or less\r\n      if (quantity <= 0) {\r\n        return removeItem(cartItemId);\r\n      }\r\n      \r\n      // Use the update endpoint from your controller\r\n      await axios.put(\r\n        'https://localhost:7126/api/Cart/update',\r\n        {\r\n          cartItemId: cartItemId,\r\n          quantity: quantity\r\n        },\r\n      \r\n      );\r\n      \r\n      // Refresh cart after successful update\r\n      fetchCartItems();\r\n    } catch (err) {\r\n      setError(err.message || 'Error updating item quantity');\r\n      throw err;\r\n    }\r\n  };\r\n  \r\n\r\n  const removeItem = async (cartItemId) => {\r\n    try {\r\n      const storedUser = localStorage.getItem('user');\r\n      if (!storedUser) {\r\n        throw new Error('User is not logged in');\r\n      }\r\n  \r\n      // Per your API, the endpoint should be api/Cart/{cartItemId}\r\n      await axios.delete(\r\n        `https://localhost:7126/api/Cart/${cartItemId}`\r\n      );\r\n  \r\n      // Refresh cart after successful removal\r\n      fetchCartItems();\r\n    } catch (err) {\r\n      setError(err.message || 'Error removing item from cart');\r\n    }\r\n  };\r\n  // Update your CartContext.js file with the following clearCart function\r\n\r\nconst clearCart = async () => {\r\n  try {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (!storedUser) {\r\n      throw new Error('User is not logged in');\r\n    }\r\n\r\n    // Call the clear cart endpoint\r\n    await axios.delete('https://localhost:7126/api/Cart/clear', {\r\n      withCredentials: true\r\n    });\r\n\r\n    // Update local state\r\n    setCartItems([]);\r\n  } catch (err) {\r\n    setError(err.message || 'Error clearing cart');\r\n    throw err;\r\n  }\r\n};\r\nuseEffect(() => {\r\n  fetchCartItems();\r\n}, []);\r\n\r\n// Then make sure to include clearCart in your context value\r\nreturn (\r\n  <CartContext.Provider value={{ \r\n    cartItems, \r\n    isLoading, \r\n    error, \r\n    addToCart, \r\n    removeItem,\r\n    updateCartItemQuantity,\r\n    clearCart // Add this\r\n  }}>\r\n    {children}\r\n  </CartContext.Provider>\r\n);\r\n\r\n}\r\n// Custom hook to use Cart Context\r\nexport const useCart = () => {\r\n  return useContext(CartContext);\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCH,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMI,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAI,CAACF,UAAU,EAAE;QACfN,YAAY,CAAC,EAAE,CAAC;QAChBE,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;;MAEA;MACA,MAAMO,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,iCAAiC,CAAC;MAEnEV,YAAY,CAACS,QAAQ,CAACE,IAAI,CAACC,KAAK,IAAI,EAAE,CAAC;MACvCV,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZT,QAAQ,CAACS,GAAG,CAACC,OAAO,IAAI,2BAA2B,CAAC;MACpDZ,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMa,SAAS,GAAG,MAAAA,CAAO;IAACC,MAAM;IAAEC;EAAQ,CAAC,KAAK;IAC9C,IAAI;MACF,MAAMX,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAI,CAACF,UAAU,EAAE;QACf,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMP,IAAI,GAAG;QACXK,MAAM,EAAEA,MAAM;QACdC,QAAQ,EAAEA;MACZ,CAAC;MAED,MAAMR,QAAQ,GAAG,MAAMjB,KAAK,CAAC2B,IAAI,CAC/B,qCAAqC,EACrCR,IAEF,CAAC;;MAED;MACAN,cAAc,CAAC,CAAC;MAChB,OAAOI,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZT,QAAQ,CAACS,GAAG,CAACC,OAAO,IAAI,2BAA2B,CAAC;MACpD,MAAMD,GAAG;IACX;EACF,CAAC;;EAED;EACA,MAAMO,sBAAsB,GAAG,MAAAA,CAAOC,UAAU,EAAEJ,QAAQ,KAAK;IAC7D,IAAI;MACF,MAAMX,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAI,CAACF,UAAU,EAAE;QACf,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;MAC1C;;MAEA;MACA,IAAID,QAAQ,IAAI,CAAC,EAAE;QACjB,OAAOK,UAAU,CAACD,UAAU,CAAC;MAC/B;;MAEA;MACA,MAAM7B,KAAK,CAAC+B,GAAG,CACb,wCAAwC,EACxC;QACEF,UAAU,EAAEA,UAAU;QACtBJ,QAAQ,EAAEA;MACZ,CAEF,CAAC;;MAED;MACAZ,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZT,QAAQ,CAACS,GAAG,CAACC,OAAO,IAAI,8BAA8B,CAAC;MACvD,MAAMD,GAAG;IACX;EACF,CAAC;EAGD,MAAMS,UAAU,GAAG,MAAOD,UAAU,IAAK;IACvC,IAAI;MACF,MAAMf,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAI,CAACF,UAAU,EAAE;QACf,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;MAC1C;;MAEA;MACA,MAAM1B,KAAK,CAACgC,MAAM,CAChB,mCAAmCH,UAAU,EAC/C,CAAC;;MAED;MACAhB,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZT,QAAQ,CAACS,GAAG,CAACC,OAAO,IAAI,+BAA+B,CAAC;IAC1D;EACF,CAAC;EACD;;EAEF,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMnB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAI,CAACF,UAAU,EAAE;QACf,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;MAC1C;;MAEA;MACA,MAAM1B,KAAK,CAACgC,MAAM,CAAC,uCAAuC,EAAE;QAC1DE,eAAe,EAAE;MACnB,CAAC,CAAC;;MAEF;MACA1B,YAAY,CAAC,EAAE,CAAC;IAClB,CAAC,CAAC,OAAOa,GAAG,EAAE;MACZT,QAAQ,CAACS,GAAG,CAACC,OAAO,IAAI,qBAAqB,CAAC;MAC9C,MAAMD,GAAG;IACX;EACF,CAAC;EACDtB,SAAS,CAAC,MAAM;IACdc,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEX,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACC,KAAK,EAAE;MAC3B7B,SAAS;MACTE,SAAS;MACTE,KAAK;MACLY,SAAS;MACTO,UAAU;MACVF,sBAAsB;MACtBK,SAAS,CAAC;IACZ,CAAE;IAAA5B,QAAA,EACCA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAGzB,CAAC;AACD;AAAAlC,EAAA,CAhJaF,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAiJzB,OAAO,MAAMsC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO9C,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAACwC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}