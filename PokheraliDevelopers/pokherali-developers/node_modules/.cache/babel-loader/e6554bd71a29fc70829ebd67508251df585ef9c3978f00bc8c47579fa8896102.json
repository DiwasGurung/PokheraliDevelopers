{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Desktop\\\\Test\\\\PokheraliDevelopers\\\\pokherali-developers\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$();\n// UserContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check for token in localStorage\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setLoading(false);\n      return;\n    }\n\n    // Fetch user profile\n    const fetchUserProfile = async () => {\n      try {\n        const response = await fetch('https://localhost:7126/api/profile', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch user profile');\n        }\n        const userData = await response.json();\n        setUser(userData);\n      } catch (err) {\n        console.error('Error fetching user profile:', err);\n        setError(err.message);\n        // Clear invalid token\n        localStorage.removeItem('token');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserProfile();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('https://localhost:7126/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const data = await response.json();\n\n      // Save token\n      localStorage.setItem('token', data.token);\n\n      // Fetch user profile\n      const profileResponse = await fetch('https://localhost:7126/api/profile', {\n        headers: {\n          'Authorization': `Bearer ${data.token}`\n        }\n      });\n      if (!profileResponse.ok) {\n        throw new Error('Failed to fetch user profile');\n      }\n      const userData = await profileResponse.json();\n      setUser(userData);\n      return userData;\n    } catch (err) {\n      console.error('Login error:', err);\n      throw err;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await fetch('https://localhost:7126/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      return await response.json();\n    } catch (err) {\n      console.error('Registration error:', err);\n      throw err;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n  const updateProfile = async updatedUserData => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Not authenticated');\n      }\n      const response = await fetch('https://localhost:7126/api/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(updatedUserData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update profile');\n      }\n      const userData = await response.json();\n      setUser(userData);\n      return userData;\n    } catch (err) {\n      console.error('Update profile error:', err);\n      throw err;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      login,\n      register,\n      logout,\n      updateProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","fetchUserProfile","response","fetch","headers","ok","Error","userData","json","err","console","message","removeItem","login","email","password","method","body","JSON","stringify","errorData","data","setItem","profileResponse","register","logout","updateProfile","updatedUserData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Desktop/Test/PokheraliDevelopers/pokherali-developers/src/contexts/UserContext.js"],"sourcesContent":["// UserContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    // Check for token in localStorage\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    // Fetch user profile\r\n    const fetchUserProfile = async () => {\r\n      try {\r\n        const response = await fetch('https://localhost:7126/api/profile', {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user profile');\r\n        }\r\n        \r\n        const userData = await response.json();\r\n        setUser(userData);\r\n      } catch (err) {\r\n        console.error('Error fetching user profile:', err);\r\n        setError(err.message);\r\n        // Clear invalid token\r\n        localStorage.removeItem('token');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchUserProfile();\r\n  }, []);\r\n  \r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch('https://localhost:7126/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Login failed');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Save token\r\n      localStorage.setItem('token', data.token);\r\n      \r\n      // Fetch user profile\r\n      const profileResponse = await fetch('https://localhost:7126/api/profile', {\r\n        headers: {\r\n          'Authorization': `Bearer ${data.token}`\r\n        }\r\n      });\r\n      \r\n      if (!profileResponse.ok) {\r\n        throw new Error('Failed to fetch user profile');\r\n      }\r\n      \r\n      const userData = await profileResponse.json();\r\n      setUser(userData);\r\n      \r\n      return userData;\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n  \r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await fetch('https://localhost:7126/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(userData)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Registration failed');\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (err) {\r\n      console.error('Registration error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n  \r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n  \r\n  const updateProfile = async (updatedUserData) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (!token) {\r\n        throw new Error('Not authenticated');\r\n      }\r\n      \r\n      const response = await fetch('https://localhost:7126/api/profile', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(updatedUserData)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to update profile');\r\n      }\r\n      \r\n      const userData = await response.json();\r\n      setUser(userData);\r\n      \r\n      return userData;\r\n    } catch (err) {\r\n      console.error('Update profile error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <UserContext.Provider value={{ \r\n      user, \r\n      loading, \r\n      error, \r\n      login, \r\n      register, \r\n      logout, \r\n      updateProfile \r\n    }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}