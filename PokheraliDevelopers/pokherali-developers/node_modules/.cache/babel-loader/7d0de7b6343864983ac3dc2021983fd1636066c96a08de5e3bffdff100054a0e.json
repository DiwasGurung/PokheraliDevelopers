{"ast":null,"code":"// // UserContext.js\n// import React, { createContext, useState, useEffect } from 'react';\n\n// export const UserContext = createContext();\n\n// export const UserProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     // Check for token in localStorage\n//     const user = localStorage.getItem('user');\n\n//     if (!user) {\n//       setLoading(false);\n//       return;\n//     }\n\n//     // Fetch user profile\n//     const fetchUserProfile = async () => {\n//       try {\n//         const response = await fetch('https://localhost:7126/api/Auth/profile');\n\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch user profile');\n//         }\n\n//         const userData = await response.json();\n//         setUser(userData);\n//       } catch (err) {\n//         console.error('Error fetching user profile:', err);\n//         setError(err.message);\n//         // Clear invalid token\n//         localStorage.removeItem('user');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchUserProfile();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await fetch('https://localhost:7126/api/auth/login', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ email, password })\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.message || 'Login failed');\n//       }\n\n//       const data = await response.json();\n\n//       // Save token\n//       localStorage.setItem('token', data.token);\n\n//       // Fetch user profile\n//       const profileResponse = await fetch('https://localhost:7126/api/auth/profile');\n\n//       if (!profileResponse.ok) {\n//         throw new Error('Failed to fetch user profile');\n//       }\n\n//       const userData = await profileResponse.json();\n//       setUser(userData);\n\n//       return userData;\n//     } catch (err) {\n//       console.error('Login error:', err);\n//       throw err;\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await fetch('https://localhost:7126/api/auth/register', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(userData)\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.message || 'Registration failed');\n//       }\n\n//       return await response.json();\n//     } catch (err) {\n//       console.error('Registration error:', err);\n//       throw err;\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('user');\n//     setUser(null);\n//   };\n\n//   const updateProfile = async (updatedUserData) => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       if (!token) {\n//         throw new Error('Not authenticated');\n//       }\n\n//       const response = await fetch('https://localhost:7126/api/profile', {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         },\n//         body: JSON.stringify(updatedUserData)\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.message || 'Failed to update profile');\n//       }\n\n//       const userData = await response.json();\n//       setUser(userData);\n\n//       return userData;\n//     } catch (err) {\n//       console.error('Update profile error:', err);\n//       throw err;\n//     }\n//   };\n\n//   return (\n//     <UserContext.Provider value={{ \n//       user, \n//       loading, \n//       error, \n//       login, \n//       register, \n//       logout, \n//       updateProfile \n//     }}>\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["C:/Users/ASUS/OneDrive/Desktop/Test/PokheraliDevelopers/pokherali-developers/src/contexts/UserContext.js"],"sourcesContent":["// // UserContext.js\r\n// import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// export const UserContext = createContext();\r\n\r\n// export const UserProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n  \r\n//   useEffect(() => {\r\n//     // Check for token in localStorage\r\n//     const user = localStorage.getItem('user');\r\n    \r\n//     if (!user) {\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n    \r\n//     // Fetch user profile\r\n//     const fetchUserProfile = async () => {\r\n//       try {\r\n//         const response = await fetch('https://localhost:7126/api/Auth/profile');\r\n        \r\n//         if (!response.ok) {\r\n//           throw new Error('Failed to fetch user profile');\r\n//         }\r\n        \r\n//         const userData = await response.json();\r\n//         setUser(userData);\r\n//       } catch (err) {\r\n//         console.error('Error fetching user profile:', err);\r\n//         setError(err.message);\r\n//         // Clear invalid token\r\n//         localStorage.removeItem('user');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n    \r\n//     fetchUserProfile();\r\n//   }, []);\r\n  \r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const response = await fetch('https://localhost:7126/api/auth/login', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify({ email, password })\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.message || 'Login failed');\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n      \r\n//       // Save token\r\n//       localStorage.setItem('token', data.token);\r\n      \r\n//       // Fetch user profile\r\n//       const profileResponse = await fetch('https://localhost:7126/api/auth/profile');\r\n      \r\n//       if (!profileResponse.ok) {\r\n//         throw new Error('Failed to fetch user profile');\r\n//       }\r\n      \r\n//       const userData = await profileResponse.json();\r\n//       setUser(userData);\r\n      \r\n//       return userData;\r\n//     } catch (err) {\r\n//       console.error('Login error:', err);\r\n//       throw err;\r\n//     }\r\n//   };\r\n  \r\n//   const register = async (userData) => {\r\n//     try {\r\n//       const response = await fetch('https://localhost:7126/api/auth/register', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(userData)\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.message || 'Registration failed');\r\n//       }\r\n      \r\n//       return await response.json();\r\n//     } catch (err) {\r\n//       console.error('Registration error:', err);\r\n//       throw err;\r\n//     }\r\n//   };\r\n  \r\n//   const logout = () => {\r\n//     localStorage.removeItem('user');\r\n//     setUser(null);\r\n//   };\r\n  \r\n//   const updateProfile = async (updatedUserData) => {\r\n//     try {\r\n//       const token = localStorage.getItem('token');\r\n      \r\n//       if (!token) {\r\n//         throw new Error('Not authenticated');\r\n//       }\r\n      \r\n//       const response = await fetch('https://localhost:7126/api/profile', {\r\n//         method: 'PUT',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           'Authorization': `Bearer ${token}`\r\n//         },\r\n//         body: JSON.stringify(updatedUserData)\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.message || 'Failed to update profile');\r\n//       }\r\n      \r\n//       const userData = await response.json();\r\n//       setUser(userData);\r\n      \r\n//       return userData;\r\n//     } catch (err) {\r\n//       console.error('Update profile error:', err);\r\n//       throw err;\r\n//     }\r\n//   };\r\n  \r\n//   return (\r\n//     <UserContext.Provider value={{ \r\n//       user, \r\n//       loading, \r\n//       error, \r\n//       login, \r\n//       register, \r\n//       logout, \r\n//       updateProfile \r\n//     }}>\r\n//       {children}\r\n//     </UserContext.Provider>\r\n//   );\r\n// };\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}