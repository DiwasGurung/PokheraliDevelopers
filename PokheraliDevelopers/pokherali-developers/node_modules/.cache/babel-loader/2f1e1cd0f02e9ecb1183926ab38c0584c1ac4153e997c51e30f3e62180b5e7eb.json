{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Desktop\\\\Test\\\\PokheraliDevelopers\\\\pokherali-developers\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Load cart from localStorage on component mount\n  useEffect(() => {\n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      try {\n        setCartItems(JSON.parse(storedCart));\n      } catch (error) {\n        console.error('Failed to parse stored cart:', error);\n        setCartItems([]);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    if (!loading) {\n      localStorage.setItem('cart', JSON.stringify(cartItems));\n    }\n  }, [cartItems, loading]);\n  const addItem = item => {\n    setCartItems(prevItems => {\n      // Check if item already exists in cart\n      const existingItemIndex = prevItems.findIndex(cartItem => cartItem.id === item.id);\n      if (existingItemIndex >= 0) {\n        // If item exists, increase quantity\n        const updatedItems = [...prevItems];\n        updatedItems[existingItemIndex] = {\n          ...updatedItems[existingItemIndex],\n          quantity: updatedItems[existingItemIndex].quantity + 1\n        };\n        return updatedItems;\n      } else {\n        // If item doesn't exist, add it with quantity 1\n        return [...prevItems, {\n          ...item,\n          quantity: 1\n        }];\n      }\n    });\n  };\n  const updateItemQuantity = (itemId, quantity) => {\n    if (quantity <= 0) {\n      removeItem(itemId);\n      return;\n    }\n    setCartItems(prevItems => {\n      return prevItems.map(item => item.id === itemId ? {\n        ...item,\n        quantity\n      } : item);\n    });\n  };\n  const removeItem = itemId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== itemId));\n  };\n  const clearCart = () => {\n    setCartItems([]);\n  };\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n  };\n  const getCartItemCount = () => {\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      loading,\n      addItem,\n      updateItemQuantity,\n      removeItem,\n      clearCart,\n      getCartTotal,\n      getCartItemCount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"5mhTbgPUIzhtWihLrkRuVDDgwRY=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","loading","setLoading","storedCart","localStorage","getItem","JSON","parse","error","console","setItem","stringify","addItem","item","prevItems","existingItemIndex","findIndex","cartItem","id","updatedItems","quantity","updateItemQuantity","itemId","removeItem","map","filter","clearCart","getCartTotal","reduce","total","price","getCartItemCount","count","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Desktop/Test/PokheraliDevelopers/pokherali-developers/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Load cart from localStorage on component mount\r\n  useEffect(() => {\r\n    const storedCart = localStorage.getItem('cart');\r\n    if (storedCart) {\r\n      try {\r\n        setCartItems(JSON.parse(storedCart));\r\n      } catch (error) {\r\n        console.error('Failed to parse stored cart:', error);\r\n        setCartItems([]);\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n  \r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      localStorage.setItem('cart', JSON.stringify(cartItems));\r\n    }\r\n  }, [cartItems, loading]);\r\n  \r\n  const addItem = (item) => {\r\n    setCartItems(prevItems => {\r\n      // Check if item already exists in cart\r\n      const existingItemIndex = prevItems.findIndex(cartItem => cartItem.id === item.id);\r\n      \r\n      if (existingItemIndex >= 0) {\r\n        // If item exists, increase quantity\r\n        const updatedItems = [...prevItems];\r\n        updatedItems[existingItemIndex] = {\r\n          ...updatedItems[existingItemIndex],\r\n          quantity: updatedItems[existingItemIndex].quantity + 1\r\n        };\r\n        return updatedItems;\r\n      } else {\r\n        // If item doesn't exist, add it with quantity 1\r\n        return [...prevItems, { ...item, quantity: 1 }];\r\n      }\r\n    });\r\n  };\r\n  \r\n  const updateItemQuantity = (itemId, quantity) => {\r\n    if (quantity <= 0) {\r\n      removeItem(itemId);\r\n      return;\r\n    }\r\n    \r\n    setCartItems(prevItems => {\r\n      return prevItems.map(item => \r\n        item.id === itemId ? { ...item, quantity } : item\r\n      );\r\n    });\r\n  };\r\n  \r\n  const removeItem = (itemId) => {\r\n    setCartItems(prevItems => prevItems.filter(item => item.id !== itemId));\r\n  };\r\n  \r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n  };\r\n  \r\n  const getCartTotal = () => {\r\n    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n  };\r\n  \r\n  const getCartItemCount = () => {\r\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\r\n  };\r\n  \r\n  return (\r\n    <CartContext.Provider value={{ \r\n      cartItems, \r\n      loading, \r\n      addItem, \r\n      updateItemQuantity, \r\n      removeItem, \r\n      clearCart, \r\n      getCartTotal, \r\n      getCartItemCount \r\n    }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}